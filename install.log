Collecting binaryoptionstoolsv2
  Using cached BinaryOptionsToolsV2-0.1.7.tar.gz (231 kB)
  Installing build dependencies: started
  Installing build dependencies: finished with status 'done'
  Getting requirements to build wheel: started
  Getting requirements to build wheel: finished with status 'done'
  Installing backend dependencies: started
  Installing backend dependencies: finished with status 'done'
  Preparing metadata (pyproject.toml): started
  Preparing metadata (pyproject.toml): finished with status 'done'
Building wheels for collected packages: binaryoptionstoolsv2
  Building wheel for binaryoptionstoolsv2 (pyproject.toml): started
  Building wheel for binaryoptionstoolsv2 (pyproject.toml): still running...
  Building wheel for binaryoptionstoolsv2 (pyproject.toml): finished with status 'error'
  error: subprocess-exited-with-error
  
  √ó Building wheel for binaryoptionstoolsv2 (pyproject.toml) did not run successfully.
  ‚îÇ exit code: 1
  ‚ï∞‚îÄ> [222 lines of output]
      Running `maturin pep517 build-wheel -i /root/.venv/bin/python --compatibility off`
      Rust not found, installing into a temporary directory
      Python reports SOABI: cpython-311-aarch64-linux-gnu
      Computed rustc target triple: aarch64-unknown-linux-gnu
      Installation directory: /root/.cache/puccinialin
      Rustup already downloaded
      Installing rust to /root/.cache/puccinialin/rustup
      warn: It looks like you have an existing rustup settings file at:
      warn: /root/.rustup/settings.toml
      warn: Rustup will install the default toolchain as specified in the settings file,
      warn: instead of the one inferred from the default host triple.
      info: profile set to 'minimal'
      info: default host triple is aarch64-unknown-linux-gnu
      warn: Updating existing toolchain, profile choice will be ignored
      info: syncing channel updates for 'stable-aarch64-unknown-linux-gnu'
      info: default toolchain set to 'stable-aarch64-unknown-linux-gnu'
      Checking if cargo is installed
      cargo 1.87.0 (99624be96 2025-05-06)
      üçπ Building a mixed python/rust project
      üîó Found pyo3 bindings
      üêç Found CPython 3.11 at /root/.venv/bin/python
      üì° Using build options features from pyproject.toml
         Compiling proc-macro2 v1.0.95
         Compiling unicode-ident v1.0.16
         Compiling quote v1.0.40
         Compiling syn v2.0.101
         Compiling synstructure v0.13.1
         Compiling libc v0.2.169
         Compiling autocfg v1.4.0
         Compiling zerofrom-derive v0.1.5
         Compiling yoke-derive v0.7.5
         Compiling cfg-if v1.0.0
         Compiling zerovec-derive v0.10.3
         Compiling displaydoc v0.2.5
         Compiling pin-project-lite v0.2.16
         Compiling smallvec v1.13.2
         Compiling serde v1.0.219
         Compiling once_cell v1.20.3
         Compiling serde_derive v1.0.219
         Compiling memchr v2.7.4
         Compiling icu_provider_macros v1.5.0
         Compiling futures-core v0.3.31
         Compiling bytes v1.10.0
         Compiling itoa v1.0.14
         Compiling lock_api v0.4.12
         Compiling slab v0.4.9
         Compiling target-lexicon v0.13.2
         Compiling futures-sink v0.3.31
         Compiling parking_lot_core v0.9.10
         Compiling zerofrom v0.1.5
         Compiling tokio-macros v2.5.0
         Compiling scopeguard v1.2.0
         Compiling shlex v1.3.0
         Compiling stable_deref_trait v1.2.0
         Compiling yoke v0.7.5
         Compiling cc v1.2.13
         Compiling pkg-config v0.3.31
         Compiling vcpkg v0.2.15
         Compiling openssl-sys v0.9.105
         Compiling parking_lot v0.12.3
         Compiling pyo3-build-config v0.24.2
         Compiling zerovec v0.10.4
         Compiling futures-channel v0.3.31
         Compiling signal-hook-registry v1.4.2
         Compiling mio v1.0.3
         Compiling socket2 v0.5.8
         Compiling futures-macro v0.3.31
         Compiling futures-task v0.3.31
         Compiling pin-utils v0.1.0
         Compiling futures-io v0.3.31
         Compiling futures-util v0.3.31
         Compiling tokio v1.44.2
      warning: openssl-sys@0.9.105: Could not find directory of OpenSSL installation, and this `-sys` crate cannot proceed without this knowledge. If OpenSSL is installed and this crate had trouble finding it,  you can set the `OPENSSL_DIR` environment variable for the compilation process. See stderr section below for further information.
      error: failed to run custom build command for `openssl-sys v0.9.105`
      
      Caused by:
        process didn't exit successfully: `/tmp/pip-install-xgu_58ay/binaryoptionstoolsv2_6373cbfe781047bab2556a2db106091b/BinaryOptionsToolsV2/target/release/build/openssl-sys-299d06944feb6732/build-script-main` (exit status: 101)
        --- stdout
        cargo:rustc-check-cfg=cfg(osslconf, values("OPENSSL_NO_OCB", "OPENSSL_NO_SM4", "OPENSSL_NO_SEED", "OPENSSL_NO_CHACHA", "OPENSSL_NO_CAST", "OPENSSL_NO_IDEA", "OPENSSL_NO_CAMELLIA", "OPENSSL_NO_RC4", "OPENSSL_NO_BF", "OPENSSL_NO_PSK", "OPENSSL_NO_DEPRECATED_3_0", "OPENSSL_NO_SCRYPT", "OPENSSL_NO_SM3", "OPENSSL_NO_RMD160", "OPENSSL_NO_EC2M", "OPENSSL_NO_OCSP", "OPENSSL_NO_CMS", "OPENSSL_NO_COMP", "OPENSSL_NO_SOCK", "OPENSSL_NO_STDIO", "OPENSSL_NO_EC", "OPENSSL_NO_SSL3_METHOD", "OPENSSL_NO_KRB5", "OPENSSL_NO_TLSEXT", "OPENSSL_NO_SRP", "OPENSSL_NO_RFC3779", "OPENSSL_NO_SHA", "OPENSSL_NO_NEXTPROTONEG", "OPENSSL_NO_ENGINE", "OPENSSL_NO_BUF_FREELISTS"))
        cargo:rustc-check-cfg=cfg(openssl)
        cargo:rustc-check-cfg=cfg(libressl)
        cargo:rustc-check-cfg=cfg(boringssl)
        cargo:rustc-check-cfg=cfg(libressl250)
        cargo:rustc-check-cfg=cfg(libressl251)
        cargo:rustc-check-cfg=cfg(libressl252)
        cargo:rustc-check-cfg=cfg(libressl261)
        cargo:rustc-check-cfg=cfg(libressl270)
        cargo:rustc-check-cfg=cfg(libressl271)
        cargo:rustc-check-cfg=cfg(libressl273)
        cargo:rustc-check-cfg=cfg(libressl280)
        cargo:rustc-check-cfg=cfg(libressl281)
        cargo:rustc-check-cfg=cfg(libressl291)
        cargo:rustc-check-cfg=cfg(libressl310)
        cargo:rustc-check-cfg=cfg(libressl321)
        cargo:rustc-check-cfg=cfg(libressl332)
        cargo:rustc-check-cfg=cfg(libressl340)
        cargo:rustc-check-cfg=cfg(libressl350)
        cargo:rustc-check-cfg=cfg(libressl360)
        cargo:rustc-check-cfg=cfg(libressl361)
        cargo:rustc-check-cfg=cfg(libressl370)
        cargo:rustc-check-cfg=cfg(libressl380)
        cargo:rustc-check-cfg=cfg(libressl381)
        cargo:rustc-check-cfg=cfg(libressl382)
        cargo:rustc-check-cfg=cfg(libressl390)
        cargo:rustc-check-cfg=cfg(libressl400)
        cargo:rustc-check-cfg=cfg(libressl410)
        cargo:rustc-check-cfg=cfg(ossl101)
        cargo:rustc-check-cfg=cfg(ossl102)
        cargo:rustc-check-cfg=cfg(ossl102f)
        cargo:rustc-check-cfg=cfg(ossl102h)
        cargo:rustc-check-cfg=cfg(ossl110)
        cargo:rustc-check-cfg=cfg(ossl110f)
        cargo:rustc-check-cfg=cfg(ossl110g)
        cargo:rustc-check-cfg=cfg(ossl110h)
        cargo:rustc-check-cfg=cfg(ossl111)
        cargo:rustc-check-cfg=cfg(ossl111b)
        cargo:rustc-check-cfg=cfg(ossl111c)
        cargo:rustc-check-cfg=cfg(ossl111d)
        cargo:rustc-check-cfg=cfg(ossl300)
        cargo:rustc-check-cfg=cfg(ossl310)
        cargo:rustc-check-cfg=cfg(ossl320)
        cargo:rustc-check-cfg=cfg(ossl330)
        cargo:rustc-check-cfg=cfg(ossl340)
        cargo:rerun-if-env-changed=AARCH64_UNKNOWN_LINUX_GNU_OPENSSL_LIB_DIR
        AARCH64_UNKNOWN_LINUX_GNU_OPENSSL_LIB_DIR unset
        cargo:rerun-if-env-changed=OPENSSL_LIB_DIR
        OPENSSL_LIB_DIR unset
        cargo:rerun-if-env-changed=AARCH64_UNKNOWN_LINUX_GNU_OPENSSL_INCLUDE_DIR
        AARCH64_UNKNOWN_LINUX_GNU_OPENSSL_INCLUDE_DIR unset
        cargo:rerun-if-env-changed=OPENSSL_INCLUDE_DIR
        OPENSSL_INCLUDE_DIR unset
        cargo:rerun-if-env-changed=AARCH64_UNKNOWN_LINUX_GNU_OPENSSL_DIR
        AARCH64_UNKNOWN_LINUX_GNU_OPENSSL_DIR unset
        cargo:rerun-if-env-changed=OPENSSL_DIR
        OPENSSL_DIR unset
        cargo:rerun-if-env-changed=OPENSSL_NO_PKG_CONFIG
        cargo:rerun-if-env-changed=PKG_CONFIG_aarch64-unknown-linux-gnu
        cargo:rerun-if-env-changed=PKG_CONFIG_aarch64_unknown_linux_gnu
        cargo:rerun-if-env-changed=HOST_PKG_CONFIG
        cargo:rerun-if-env-changed=PKG_CONFIG
        cargo:rerun-if-env-changed=OPENSSL_STATIC
        cargo:rerun-if-env-changed=OPENSSL_DYNAMIC
        cargo:rerun-if-env-changed=PKG_CONFIG_ALL_STATIC
        cargo:rerun-if-env-changed=PKG_CONFIG_ALL_DYNAMIC
        cargo:rerun-if-env-changed=PKG_CONFIG_PATH_aarch64-unknown-linux-gnu
        cargo:rerun-if-env-changed=PKG_CONFIG_PATH_aarch64_unknown_linux_gnu
        cargo:rerun-if-env-changed=HOST_PKG_CONFIG_PATH
        cargo:rerun-if-env-changed=PKG_CONFIG_PATH
        cargo:rerun-if-env-changed=PKG_CONFIG_LIBDIR_aarch64-unknown-linux-gnu
        cargo:rerun-if-env-changed=PKG_CONFIG_LIBDIR_aarch64_unknown_linux_gnu
        cargo:rerun-if-env-changed=HOST_PKG_CONFIG_LIBDIR
        cargo:rerun-if-env-changed=PKG_CONFIG_LIBDIR
        cargo:rerun-if-env-changed=PKG_CONFIG_SYSROOT_DIR_aarch64-unknown-linux-gnu
        cargo:rerun-if-env-changed=PKG_CONFIG_SYSROOT_DIR_aarch64_unknown_linux_gnu
        cargo:rerun-if-env-changed=HOST_PKG_CONFIG_SYSROOT_DIR
        cargo:rerun-if-env-changed=PKG_CONFIG_SYSROOT_DIR
        cargo:rerun-if-env-changed=OPENSSL_STATIC
        cargo:rerun-if-env-changed=OPENSSL_DYNAMIC
        cargo:rerun-if-env-changed=PKG_CONFIG_ALL_STATIC
        cargo:rerun-if-env-changed=PKG_CONFIG_ALL_DYNAMIC
        cargo:rerun-if-env-changed=PKG_CONFIG_PATH_aarch64-unknown-linux-gnu
        cargo:rerun-if-env-changed=PKG_CONFIG_PATH_aarch64_unknown_linux_gnu
        cargo:rerun-if-env-changed=HOST_PKG_CONFIG_PATH
        cargo:rerun-if-env-changed=PKG_CONFIG_PATH
        cargo:rerun-if-env-changed=PKG_CONFIG_LIBDIR_aarch64-unknown-linux-gnu
        cargo:rerun-if-env-changed=PKG_CONFIG_LIBDIR_aarch64_unknown_linux_gnu
        cargo:rerun-if-env-changed=HOST_PKG_CONFIG_LIBDIR
        cargo:rerun-if-env-changed=PKG_CONFIG_LIBDIR
        cargo:rerun-if-env-changed=PKG_CONFIG_SYSROOT_DIR_aarch64-unknown-linux-gnu
        cargo:rerun-if-env-changed=PKG_CONFIG_SYSROOT_DIR_aarch64_unknown_linux_gnu
        cargo:rerun-if-env-changed=HOST_PKG_CONFIG_SYSROOT_DIR
        cargo:rerun-if-env-changed=PKG_CONFIG_SYSROOT_DIR
      
      
        Could not find openssl via pkg-config:
        Could not run `PKG_CONFIG_ALLOW_SYSTEM_CFLAGS=1 pkg-config --libs --cflags openssl`
        The pkg-config command could not be found.
      
        Most likely, you need to install a pkg-config package for your OS.
        Try `apt install pkg-config`, or `yum install pkg-config`,
        or `pkg install pkg-config`, or `apk add pkgconfig` depending on your distribution.
      
        If you've already installed it, ensure the pkg-config command is one of the
        directories in the PATH environment variable.
      
        If you did not expect this build to link to a pre-installed system library,
        then check documentation of the openssl-sys crate for an option to
        build the library from source, or disable features or dependencies
        that require pkg-config.
      
        cargo:warning=Could not find directory of OpenSSL installation, and this `-sys` crate cannot proceed without this knowledge. If OpenSSL is installed and this crate had trouble finding it,  you can set the `OPENSSL_DIR` environment variable for the compilation process. See stderr section below for further information.
      
        --- stderr
      
      
        Could not find directory of OpenSSL installation, and this `-sys` crate cannot
        proceed without this knowledge. If OpenSSL is installed and this crate had
        trouble finding it,  you can set the `OPENSSL_DIR` environment variable for the
        compilation process.
      
        Make sure you also have the development packages of openssl installed.
        For example, `libssl-dev` on Ubuntu or `openssl-devel` on Fedora.
      
        If you're in a situation where you think the directory *should* be found
        automatically, please open a bug at https://github.com/sfackler/rust-openssl
        and include information about your system as well as this message.
      
        $HOST = aarch64-unknown-linux-gnu
        $TARGET = aarch64-unknown-linux-gnu
        openssl-sys = 0.9.105
      
      
        It looks like you're compiling on Linux and also targeting Linux. Currently this
        requires the `pkg-config` utility to find OpenSSL but unfortunately `pkg-config`
        could not be found. If you have OpenSSL installed you can likely fix this by
        installing `pkg-config`.
      
      
      üí• maturin failed
        Caused by: Failed to build a native library through cargo
        Caused by: Cargo build finished with "exit status: 101": `env -u CARGO PYO3_ENVIRONMENT_SIGNATURE="cpython-3.11-64bit" PYO3_PYTHON="/root/.venv/bin/python" PYTHON_SYS_EXECUTABLE="/root/.venv/bin/python" "cargo" "rustc" "--features" "pyo3/extension-module" "--message-format" "json-render-diagnostics" "--manifest-path" "/tmp/pip-install-xgu_58ay/binaryoptionstoolsv2_6373cbfe781047bab2556a2db106091b/BinaryOptionsToolsV2/Cargo.toml" "--release" "--lib"`
      Error: command ['maturin', 'pep517', 'build-wheel', '-i', '/root/.venv/bin/python', '--compatibility', 'off'] returned non-zero exit status 1
      [end of output]
  
  note: This error originates from a subprocess, and is likely not a problem with pip.
  ERROR: Failed building wheel for binaryoptionstoolsv2
Failed to build binaryoptionstoolsv2
ERROR: Could not build wheels for binaryoptionstoolsv2, which is required to install pyproject.toml-based projects

[notice] A new release of pip is available: 24.0 -> 25.1.1
[notice] To update, run: pip install --upgrade pip
